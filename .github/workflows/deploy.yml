name: Deploy

on:
  push:
    branches:
      - master
      - next
      - prod

jobs:
  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repo
        uses: actions/checkout@v2

      - name: Setup Node
        uses: actions/setup-node@v1
        with:
          node-version: 12

      - name: Get yarn cache
        id: yarn-cache
        run: echo "::set-output name=dir::$(yarn cache dir)"

      - uses: actions/cache@v1
        with:
          path: ${{ steps.yarn-cache.outputs.dir }}
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}

      - name: Install Dependencies
        run: |
          yarn install --frozen-lockfile

      - name: Expose Application Environment Variables
        env:
          MASTER_REACT_APP_GOOGLE_API_KEY: ${{ secrets.MASTER_REACT_APP_GOOGLE_API_KEY }}
          NEXT_REACT_APP_GOOGLE_API_KEY: ${{ secrets.NEXT_REACT_APP_GOOGLE_API_KEY }}
          PROD_REACT_APP_GOOGLE_API_KEY: ${{ secrets.PROD_REACT_APP_GOOGLE_API_KEY }}
        run: |
          # Get branch name from last section of ref
          gitBranch=${GITHUB_REF##*/}
          # Uppercase branch name and replace "-" with "_"
          branchPrefix=$(echo $gitBranch | tr a-z A-Z | tr - _)
          # Create env variable name including branch
          branchApiKeyName="${branchPrefix}_REACT_APP_GOOGLE_API_KEY"
          # Evaluate name variable to get variables value
          branchApiKey=$(eval echo \$${branchApiKeyName})
          # Exit if branch API key is not found
          if [[ -z "${branchApiKey}" ]]; then
            echo Branch Google API Key not found, exiting
            exit 1
          fi
          # Expose variable to environment for later steps
          echo "::set-env name=REACT_APP_GOOGLE_API_KEY::$branchApiKey"

      - name: Verify App
        run: |
          yarn build

      - name: Deploy to Firebase
        env:
          FIREBASE_TOKEN: ${{ secrets.FIREBASE_TOKEN }}
          GITHUB_REF: ${{ github.ref }}
          GITHUB_HEAD_REF: ${{ github.head_ref }}
        run: |
          $(yarn bin)/firebase-ci deploy -s

      - name: Check if version has been updated
        if: github.ref == 'refs/heads/prod'
        id: check
        uses: EndBug/version-check@v1

      - name: Create Release
        if: github.ref == 'refs/heads/prod' && steps.check.outputs.changed == 'true'
        id: create_release
        uses: actions/create-release@latest
        env:
          GITHUB_TOKEN: ${{ github.token }}
        with:
          tag_name: v${{ env.PACKAGE_VERSION }}
          release_name: v${{ env.PACKAGE_VERSION }}
          draft: false
          prerelease: false
